// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MyBooksBestSellers;
//
//    var bestSellers = BestSellers.FromJson(jsonString);

namespace MyBooksBestSellers
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BestSellers
    {
        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("copyright")]
        public string Copyright { get; set; }

        [JsonProperty("num_results")]
        public long NumResults { get; set; }

        [JsonProperty("last_modified")]
        public DateTimeOffset LastModified { get; set; }

        [JsonProperty("results")]
        public Results Results { get; set; }
    }

    public partial class Results
    {
        [JsonProperty("list_name")]
        public string ListName { get; set; }

        [JsonProperty("list_name_encoded")]
        public string ListNameEncoded { get; set; }

        [JsonProperty("bestsellers_date")]
        public DateTimeOffset BestsellersDate { get; set; }

        [JsonProperty("published_date")]
        public DateTimeOffset PublishedDate { get; set; }

        [JsonProperty("published_date_description")]
        public string PublishedDateDescription { get; set; }

        [JsonProperty("next_published_date")]
        public string NextPublishedDate { get; set; }

        [JsonProperty("previous_published_date")]
        public DateTimeOffset PreviousPublishedDate { get; set; }

        [JsonProperty("display_name")]
        public string DisplayName { get; set; }

        [JsonProperty("normal_list_ends_at")]
        public long NormalListEndsAt { get; set; }

        [JsonProperty("updated")]
        public string Updated { get; set; }

        [JsonProperty("books")]
        public List<Book> Books { get; set; }

        [JsonProperty("corrections")]
        public List<object> Corrections { get; set; }
    }

    public partial class Book
    {
        [JsonProperty("rank")]
        public long Rank { get; set; }

        [JsonProperty("rank_last_week")]
        public long RankLastWeek { get; set; }

        [JsonProperty("weeks_on_list")]
        public long WeeksOnList { get; set; }

        [JsonProperty("asterisk")]
        public long Asterisk { get; set; }

        [JsonProperty("dagger")]
        public long Dagger { get; set; }

        [JsonProperty("primary_isbn10")]
        public string PrimaryIsbn10 { get; set; }

        [JsonProperty("primary_isbn13")]
        public string PrimaryIsbn13 { get; set; }

        [JsonProperty("publisher")]
        public string Publisher { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("price")]
        public string Price { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("author")]
        public string Author { get; set; }

        [JsonProperty("contributor")]
        public string Contributor { get; set; }

        [JsonProperty("contributor_note")]
        public string ContributorNote { get; set; }

        [JsonProperty("book_image")]
        public Uri BookImage { get; set; }

        [JsonProperty("book_image_width")]
        public long BookImageWidth { get; set; }

        [JsonProperty("book_image_height")]
        public long BookImageHeight { get; set; }

        [JsonProperty("amazon_product_url")]
        public Uri AmazonProductUrl { get; set; }

        [JsonProperty("age_group")]
        public string AgeGroup { get; set; }

        [JsonProperty("book_review_link")]
        public string BookReviewLink { get; set; }

        [JsonProperty("first_chapter_link")]
        public string FirstChapterLink { get; set; }

        [JsonProperty("sunday_review_link")]
        public string SundayReviewLink { get; set; }

        [JsonProperty("article_chapter_link")]
        public string ArticleChapterLink { get; set; }

        [JsonProperty("isbns")]
        public List<Isbn> Isbns { get; set; }

        [JsonProperty("buy_links")]
        public List<BuyLink> BuyLinks { get; set; }

        [JsonProperty("book_uri")]
        public string BookUri { get; set; }
    }

    public partial class BuyLink
    {
        [JsonProperty("name")]
        public Name Name { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class Isbn
    {
        [JsonProperty("isbn10")]
        public string Isbn10 { get; set; }

        [JsonProperty("isbn13")]
        public string Isbn13 { get; set; }
    }

    public enum Name { Amazon, AppleBooks, BarnesAndNoble, BooksAMillion, Bookshop, IndieBound };

    public partial class BestSellers
    {
        public static BestSellers FromJson(string json) => JsonConvert.DeserializeObject<BestSellers>(json, MyBooksBestSellers.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BestSellers self) => JsonConvert.SerializeObject(self, MyBooksBestSellers.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                NameConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Amazon":
                    return Name.Amazon;
                case "Apple Books":
                    return Name.AppleBooks;
                case "Barnes and Noble":
                    return Name.BarnesAndNoble;
                case "Books-A-Million":
                    return Name.BooksAMillion;
                case "Bookshop":
                    return Name.Bookshop;
                case "IndieBound":
                    return Name.IndieBound;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            switch (value)
            {
                case Name.Amazon:
                    serializer.Serialize(writer, "Amazon");
                    return;
                case Name.AppleBooks:
                    serializer.Serialize(writer, "Apple Books");
                    return;
                case Name.BarnesAndNoble:
                    serializer.Serialize(writer, "Barnes and Noble");
                    return;
                case Name.BooksAMillion:
                    serializer.Serialize(writer, "Books-A-Million");
                    return;
                case Name.Bookshop:
                    serializer.Serialize(writer, "Bookshop");
                    return;
                case Name.IndieBound:
                    serializer.Serialize(writer, "IndieBound");
                    return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }
}
